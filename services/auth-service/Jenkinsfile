pipeline {
    agent any

    environment {
        GHCR_CREDENTIALS = credentials('GHCR_PAT')
        KUBECONFIG_PATH = credentials('minikube-kubeconfig')
        IMAGE_NAME = "ghcr.io/gurvindrasingh/trucking-saas/auth-service"
        IMAGE_TAG = "${GIT_COMMIT}"
    }

    options {
        disableConcurrentBuilds()
        durabilityHint('MAX_SURVIVABILITY')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // stage('Pull Image from GHCR') {
        //     steps {
        //         script {
        //             echo "ðŸ”„ Pulling Docker image from GHCR..."
        //             sh "echo $GHCR_CREDENTIALS_PSW | docker login ghcr.io -u $GHCR_CREDENTIALS_USR --password-stdin"
        //             sh "docker pull ${IMAGE_NAME}:${IMAGE_TAG}"
        //         }
        //     }
        // }

        // stage('Deploy to Kubernetes') {
        //     steps {
        //         script {
        //             echo "ðŸš€ Deploying to Kubernetes..."
        //             withEnv(["KUBECONFIG=${KUBECONFIG_PATH}"]) {
        //                 sh "kubectl set image deployment/auth-service auth-service=${IMAGE_NAME}:${IMAGE_TAG} --namespace=default || kubectl apply -f infra/k8s/auth-service/deployment.yaml"
        //             }
        //         }
        //     }
        // }

        // stage('Deploy to Kubernetes') {
        //     steps {
        //         script {
        //             echo "ðŸš€ Deploying to Kubernetes..."
        //             withEnv(["KUBECONFIG=${KUBECONFIG_PATH}"]) {
        //                 sh "kubectl apply -f infra/k8s/auth-service/deployment.yaml"
        //             }
        //         }
        //     }
        // }

        stage('Install kubectl') {
            steps {
                script {
                sh '''
                    if [ ! -f "$HOME/bin/kubectl" ]; then
                    echo "ðŸ”§ Installing kubectl locally..."
                    mkdir -p $HOME/bin
                    curl -LO https://dl.k8s.io/release/v1.24.1/bin/linux/amd64/kubectl
                    chmod +x ./kubectl
                    mv ./kubectl $HOME/bin/kubectl
                    else
                    echo "âœ… kubectl already exists."
                    fi
                    export PATH=$HOME/bin:$PATH
                    kubectl version --client
                '''
                }
            }
        }


        stage('Check kubectl') {
            steps {
                script {
                sh 'which kubectl || echo "kubectl not found"'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "ðŸš€ Deploying to Kubernetes..."
                    withEnv(["KUBECONFIG=${KUBECONFIG_PATH}"]) {
                        // Replace the placeholder in YAML
                        sh """
                        sed -i 's|\\\${IMAGE_TAG}|${IMAGE_TAG}|g' infra/k8s/auth-service/deployment.yaml
                        kubectl apply -f infra/k8s/auth-service/deployment.yaml
                        """
                    }
                }
            }
        }

    }

    post {
        always {
            echo 'ðŸ§¹ No need to clean Docker, skipping Docker prune...'
        }
    }
}
